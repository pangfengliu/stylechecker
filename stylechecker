#!/bin/sh

filename=$1

asm=`grep -E "asm" -o $filename | wc -l`
doublesharp=`grep -E "##" -o $filename | wc -l`

echo $asm "asm found"
echo $doublesharp "## found"

if [ $asm -gt 0 ] | [ $doublesharp -gt 0 ] ; then
   echo "Trying to temper the cyclomatic number checking during an examination is considered cheating." 
   echo "Your final grade will be F, and we will report your actions to the university."
   exit
fi

# remove the longest matching prefix as *.
# and leaves the suffix
suffix=${filename##*.}
echo "suffix" $suffix


if [ $suffix = "c" ]
then
    compiler="gcc"
    preprocessed=`mktemp`.c
    includeremoved=`mktemp`.c
    trimmed=`mktemp`.c
    sed "s/#include\s*<[a-z]*.h>//" "$filename" > $includeremoved
    $compiler -E $includeremoved > $preprocessed
    sed -f remove-items $preprocessed > $trimmed
elif [ $suffix = "cc" ]
then
    compiler="g++"
    preprocessed=`mktemp`.cc
    includeremoved=`mktemp`.cc
    trimmed=`mktemp`.cc
    sed "s/#include\s*<[a-z]*>//" "$filename" > $includeremoved
    $compiler -E $includeremoved > $preprocessed
    sed -f remove-items $preprocessed > $trimmed
else
    echo "unknown suffix" $suffix
    exit
fi

$compiler -g $filename
nmlist=`mktemp`
global=`nm -l a.out | grep ":" | grep "[0-8] [^T]" | awk '{sub(/^.*\//, "", $4); print $3 " in " $4}' | tee $nmlist | wc -l`
echo "global variables found:" $global
cat $nmlist

echo "============================"
cc1=`grep -w -E "(if)|(case)|(while)|(for)" -o $trimmed | wc -l`

echo "if case while for found:" $cc1
grep -w -E "(if)|(case)|(while)|(for)" $trimmed
echo "============================"
cc2=`grep -E "(\?)" -o $trimmed | wc -l`
echo "? found:" $cc2
grep -E "(\?)" $trimmed
echo "============================"
echo "estimated cyclomatic complexity:" $(( $cc1 + $cc2 ))
echo "============================"
goto=`grep -w -E "goto" -o $trimmed | wc -l`
echo "goto found:" $goto
grep -w -E "goto" $trimmed
echo "============================"
longest=`awk ' { if ( length > x ) { x = length} }END{ print x }' $filename`
echo "the length of the longest line:" $longest

